// Code generated by MockGen. DO NOT EDIT.
// Source: rmq_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRmqClient is a mock of RmqClient interface.
type MockRmqClient struct {
	ctrl     *gomock.Controller
	recorder *MockRmqClientMockRecorder
}

// MockRmqClientMockRecorder is the mock recorder for MockRmqClient.
type MockRmqClientMockRecorder struct {
	mock *MockRmqClient
}

// NewMockRmqClient creates a new mock instance.
func NewMockRmqClient(ctrl *gomock.Controller) *MockRmqClient {
	mock := &MockRmqClient{ctrl: ctrl}
	mock.recorder = &MockRmqClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRmqClient) EXPECT() *MockRmqClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRmqClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRmqClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRmqClient)(nil).Close))
}

// Consume mocks base method.
func (m *MockRmqClient) Consume(queueName string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queueName)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockRmqClientMockRecorder) Consume(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRmqClient)(nil).Consume), queueName)
}

// Publish mocks base method.
func (m *MockRmqClient) Publish(routingKey string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", routingKey, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRmqClientMockRecorder) Publish(routingKey, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRmqClient)(nil).Publish), routingKey, body)
}
